%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.22.5
-module(rpc_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Status/1, enum_value_by_symbol_Status/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("rpc_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Status'() :: 'ERROR' | 'SUCCESS'.
-export_type(['Status'/0]).

%% message types
-type 'DisconnectResponse'() :: #'DisconnectResponse'{}.
-type 'CommandResponse'() :: #'CommandResponse'{}.
-type 'CommandMessage'() :: #'CommandMessage'{}.
-type 'ConnectionResponse'() :: #'ConnectionResponse'{}.
-type 'ConnectionRequest'() :: #'ConnectionRequest'{}.
-type 'DisconnectRequest'() :: #'DisconnectRequest'{}.
-export_type(['DisconnectResponse'/0, 'CommandResponse'/0, 'CommandMessage'/0, 'ConnectionResponse'/0, 'ConnectionRequest'/0, 'DisconnectRequest'/0]).

-record('map<string,string>',{key, value}).

encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'DisconnectResponse'{} ->
	  e_msg_DisconnectResponse(Msg);
      #'CommandResponse'{} -> e_msg_CommandResponse(Msg);
      #'CommandMessage'{} -> e_msg_CommandMessage(Msg);
      #'ConnectionResponse'{} ->
	  e_msg_ConnectionResponse(Msg);
      #'ConnectionRequest'{} -> e_msg_ConnectionRequest(Msg);
      #'DisconnectRequest'{} -> e_msg_DisconnectRequest(Msg)
    end.


e_msg_DisconnectResponse(Msg) ->
    e_msg_DisconnectResponse(Msg, <<>>).


e_msg_DisconnectResponse(#'DisconnectResponse'{status =
						   F1},
			 Bin) ->
    if F1 =:= 'ERROR' -> Bin;
       true -> e_enum_Status(F1, <<Bin/binary, 8>>)
    end.

e_msg_CommandResponse(Msg) ->
    e_msg_CommandResponse(Msg, <<>>).


e_msg_CommandResponse(#'CommandResponse'{status = F1,
					 disconnect = F2, stop_streams = F3,
					 stream_from = F4, stream_id = F5,
					 transmissions = F6},
		      Bin) ->
    B1 = if F1 =:= 'ERROR' -> Bin;
	    true -> e_enum_Status(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 =:= false -> B1;
	    true -> e_type_bool(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 =:= false -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 =:= false -> B3;
	    true -> e_type_bool(F4, <<B3/binary, 32>>)
	 end,
    B5 = case iolist_size(F5) of
	   0 -> B4;
	   _ -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    begin
      TrF6 = id(F6),
      if TrF6 == [] -> B5;
	 true -> e_field_CommandResponse_transmissions(TrF6, B5)
      end
    end.

e_msg_CommandMessage(Msg) ->
    e_msg_CommandMessage(Msg, <<>>).


e_msg_CommandMessage(#'CommandMessage'{command = F1,
				       identifier = F2,
				       connection_identifiers = F3, data = F4},
		     Bin) ->
    B1 = case iolist_size(F1) of
	   0 -> Bin;
	   _ -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = case iolist_size(F2) of
	   0 -> B1;
	   _ -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    B3 = case iolist_size(F3) of
	   0 -> B2;
	   _ -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    case iolist_size(F4) of
      0 -> B3;
      _ -> e_type_string(F4, <<B3/binary, 34>>)
    end.

e_msg_ConnectionResponse(Msg) ->
    e_msg_ConnectionResponse(Msg, <<>>).


e_msg_ConnectionResponse(#'ConnectionResponse'{status =
						   F1,
					       identifiers = F2,
					       transmissions = F3},
			 Bin) ->
    B1 = if F1 =:= 'ERROR' -> Bin;
	    true -> e_enum_Status(F1, <<Bin/binary, 8>>)
	 end,
    B2 = case iolist_size(F2) of
	   0 -> B1;
	   _ -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_ConnectionResponse_transmissions(TrF3, B2)
      end
    end.

e_msg_ConnectionRequest(Msg) ->
    e_msg_ConnectionRequest(Msg, <<>>).


e_msg_ConnectionRequest(#'ConnectionRequest'{path = F1,
					     headers = F2},
			Bin) ->
    B1 = case iolist_size(F1) of
	   0 -> Bin;
	   _ -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2),
      if TrF2 == [] -> B1;
	 true -> e_field_ConnectionRequest_headers(TrF2, B1)
      end
    end.

e_msg_DisconnectRequest(Msg) ->
    e_msg_DisconnectRequest(Msg, <<>>).


e_msg_DisconnectRequest(#'DisconnectRequest'{identifiers
						 = F1,
					     subscriptions = F2},
			Bin) ->
    B1 = case iolist_size(F1) of
	   0 -> Bin;
	   _ -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_DisconnectRequest_subscriptions(TrF2, B1)
      end
    end.

e_field_CommandResponse_transmissions(Elems, Bin)
    when Elems =/= [] ->
    SubBin = e_pfield_CommandResponse_transmissions(Elems,
						    <<>>),
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_CommandResponse_transmissions([], Bin) -> Bin.

e_pfield_CommandResponse_transmissions([Value | Rest],
				       Bin) ->
    Bin2 = e_type_string(Value, Bin),
    e_pfield_CommandResponse_transmissions(Rest, Bin2);
e_pfield_CommandResponse_transmissions([], Bin) -> Bin.

e_field_ConnectionResponse_transmissions(Elems, Bin)
    when Elems =/= [] ->
    SubBin =
	e_pfield_ConnectionResponse_transmissions(Elems, <<>>),
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_ConnectionResponse_transmissions([], Bin) ->
    Bin.

e_pfield_ConnectionResponse_transmissions([Value
					   | Rest],
					  Bin) ->
    Bin2 = e_type_string(Value, Bin),
    e_pfield_ConnectionResponse_transmissions(Rest, Bin2);
e_pfield_ConnectionResponse_transmissions([], Bin) ->
    Bin.

e_mfield_ConnectionRequest_headers(Msg, Bin) ->
    SubBin = 'e_msg_map<string,string>'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ConnectionRequest_headers([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_ConnectionRequest_headers('tr_encode_ConnectionRequest.headers.[elem]'(Elem),
					   Bin2),
    e_field_ConnectionRequest_headers(Rest, Bin3);
e_field_ConnectionRequest_headers([], Bin) -> Bin.

e_field_DisconnectRequest_subscriptions(Elems, Bin)
    when Elems =/= [] ->
    SubBin = e_pfield_DisconnectRequest_subscriptions(Elems,
						      <<>>),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_DisconnectRequest_subscriptions([], Bin) -> Bin.

e_pfield_DisconnectRequest_subscriptions([Value | Rest],
					 Bin) ->
    Bin2 = e_type_string(Value, Bin),
    e_pfield_DisconnectRequest_subscriptions(Rest, Bin2);
e_pfield_DisconnectRequest_subscriptions([], Bin) ->
    Bin.


'e_msg_map<string,string>'(#'map<string,string>'{key =
						     F1,
						 value = F2},
			   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).


e_enum_Status('ERROR', Bin) -> <<Bin/binary, 0>>;
e_enum_Status('SUCCESS', Bin) -> <<Bin/binary, 1>>.

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'DisconnectResponse' -> d_msg_DisconnectResponse(Bin);
      'CommandResponse' -> d_msg_CommandResponse(Bin);
      'CommandMessage' -> d_msg_CommandMessage(Bin);
      'ConnectionResponse' -> d_msg_ConnectionResponse(Bin);
      'ConnectionRequest' -> d_msg_ConnectionRequest(Bin);
      'DisconnectRequest' -> d_msg_DisconnectRequest(Bin)
    end.



d_msg_DisconnectResponse(Bin) ->
    dfp_read_field_def_DisconnectResponse(Bin, 0, 0,
					  id('ERROR')).

dfp_read_field_def_DisconnectResponse(<<8,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    d_field_DisconnectResponse_status(Rest, Z1, Z2, F1);
dfp_read_field_def_DisconnectResponse(<<>>, 0, 0, F1) ->
    #'DisconnectResponse'{status = F1};
dfp_read_field_def_DisconnectResponse(Other, Z1, Z2,
				      F1) ->
    dg_read_field_def_DisconnectResponse(Other, Z1, Z2, F1).

dg_read_field_def_DisconnectResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_DisconnectResponse(Rest, N + 7,
					 X bsl N + Acc, F1);
dg_read_field_def_DisconnectResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_DisconnectResponse_status(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_DisconnectResponse(Rest, 0, 0, F1);
	    1 -> skip_64_DisconnectResponse(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_DisconnectResponse(Rest, 0, 0,
							 F1);
	    5 -> skip_32_DisconnectResponse(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_DisconnectResponse(<<>>, 0, 0, F1) ->
    #'DisconnectResponse'{status = F1}.

d_field_DisconnectResponse_status(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    d_field_DisconnectResponse_status(Rest, N + 7,
				      X bsl N + Acc, F1);
d_field_DisconnectResponse_status(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Status(Tmp),
    dfp_read_field_def_DisconnectResponse(Rest, 0, 0,
					  NewFValue).


skip_varint_DisconnectResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    skip_varint_DisconnectResponse(Rest, Z1, Z2, F1);
skip_varint_DisconnectResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_DisconnectResponse(Rest, Z1, Z2, F1).


skip_length_delimited_DisconnectResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_DisconnectResponse(Rest, N + 7,
					     X bsl N + Acc, F1);
skip_length_delimited_DisconnectResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisconnectResponse(Rest2, 0, 0, F1).


skip_32_DisconnectResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F1) ->
    dfp_read_field_def_DisconnectResponse(Rest, Z1, Z2, F1).


skip_64_DisconnectResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F1) ->
    dfp_read_field_def_DisconnectResponse(Rest, Z1, Z2, F1).


d_msg_CommandResponse(Bin) ->
    dfp_read_field_def_CommandResponse(Bin, 0, 0,
				       id('ERROR'), id(false), id(false),
				       id(false), id(<<>>), id([])).

dfp_read_field_def_CommandResponse(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandResponse_status(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6);
dfp_read_field_def_CommandResponse(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandResponse_disconnect(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6);
dfp_read_field_def_CommandResponse(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandResponse_stop_streams(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6);
dfp_read_field_def_CommandResponse(<<32, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandResponse_stream_from(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6);
dfp_read_field_def_CommandResponse(<<42, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandResponse_stream_id(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
dfp_read_field_def_CommandResponse(<<50, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandResponse_transmissions(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6);
dfp_read_field_def_CommandResponse(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6) ->
    #'CommandResponse'{status = F1, disconnect = F2,
		       stop_streams = F3, stream_from = F4, stream_id = F5,
		       transmissions = lists_reverse(F6)};
dfp_read_field_def_CommandResponse(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, F6) ->
    dg_read_field_def_CommandResponse(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, F6).

dg_read_field_def_CommandResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_CommandResponse(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
dg_read_field_def_CommandResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommandResponse_status(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6);
      16 ->
	  d_field_CommandResponse_disconnect(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6);
      24 ->
	  d_field_CommandResponse_stop_streams(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6);
      32 ->
	  d_field_CommandResponse_stream_from(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6);
      42 ->
	  d_field_CommandResponse_stream_id(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      50 ->
	  d_field_CommandResponse_transmissions(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommandResponse(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6);
	    1 ->
		skip_64_CommandResponse(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6);
	    2 ->
		skip_length_delimited_CommandResponse(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6);
	    5 ->
		skip_32_CommandResponse(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6)
	  end
    end;
dg_read_field_def_CommandResponse(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6) ->
    #'CommandResponse'{status = F1, disconnect = F2,
		       stop_streams = F3, stream_from = F4, stream_id = F5,
		       transmissions = lists_reverse(F6)}.

d_field_CommandResponse_status(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandResponse_status(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CommandResponse_status(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Status(Tmp),
    dfp_read_field_def_CommandResponse(Rest, 0, 0,
				       NewFValue, F2, F3, F4, F5, F6).


d_field_CommandResponse_disconnect(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandResponse_disconnect(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CommandResponse_disconnect(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, F3, F4, F5, F6) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CommandResponse(Rest, 0, 0, F1,
				       NewFValue, F3, F4, F5, F6).


d_field_CommandResponse_stop_streams(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandResponse_stop_streams(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CommandResponse_stop_streams(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, _, F4, F5, F6) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CommandResponse(Rest, 0, 0, F1, F2,
				       NewFValue, F4, F5, F6).


d_field_CommandResponse_stream_from(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandResponse_stream_from(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CommandResponse_stream_from(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, _, F5, F6) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CommandResponse(Rest, 0, 0, F1, F2,
				       F3, NewFValue, F5, F6).


d_field_CommandResponse_stream_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandResponse_stream_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CommandResponse_stream_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, _, F6) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CommandResponse(Rest2, 0, 0, F1, F2,
				       F3, F4, NewFValue, F6).


d_field_CommandResponse_transmissions(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandResponse_transmissions(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  F6);
d_field_CommandResponse_transmissions(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_CommandResponse_transmissions(PackedBytes,
						     0, 0, F6),
    dfp_read_field_def_CommandResponse(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, NewSeq).


d_packed_field_CommandResponse_transmissions(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_CommandResponse_transmissions(Rest,
						 N + 7, X bsl N + Acc, AccSeq);
d_packed_field_CommandResponse_transmissions(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, AccSeq) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    d_packed_field_CommandResponse_transmissions(Rest2, 0,
						 0, [NewFValue | AccSeq]);
d_packed_field_CommandResponse_transmissions(<<>>, 0, 0,
					     AccSeq) ->
    AccSeq.


skip_varint_CommandResponse(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_CommandResponse(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6);
skip_varint_CommandResponse(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CommandResponse(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6).


skip_length_delimited_CommandResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_CommandResponse(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  F6);
skip_length_delimited_CommandResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommandResponse(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6).


skip_32_CommandResponse(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CommandResponse(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6).


skip_64_CommandResponse(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CommandResponse(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6).


d_msg_CommandMessage(Bin) ->
    dfp_read_field_def_CommandMessage(Bin, 0, 0, id(<<>>),
				      id(<<>>), id(<<>>), id(<<>>)).

dfp_read_field_def_CommandMessage(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_CommandMessage_command(Rest, Z1, Z2, F1, F2, F3,
				   F4);
dfp_read_field_def_CommandMessage(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_CommandMessage_identifier(Rest, Z1, Z2, F1, F2,
				      F3, F4);
dfp_read_field_def_CommandMessage(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_CommandMessage_connection_identifiers(Rest, Z1,
						  Z2, F1, F2, F3, F4);
dfp_read_field_def_CommandMessage(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_CommandMessage_data(Rest, Z1, Z2, F1, F2, F3,
				F4);
dfp_read_field_def_CommandMessage(<<>>, 0, 0, F1, F2,
				  F3, F4) ->
    #'CommandMessage'{command = F1, identifier = F2,
		      connection_identifiers = F3, data = F4};
dfp_read_field_def_CommandMessage(Other, Z1, Z2, F1, F2,
				  F3, F4) ->
    dg_read_field_def_CommandMessage(Other, Z1, Z2, F1, F2,
				     F3, F4).

dg_read_field_def_CommandMessage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_CommandMessage(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_CommandMessage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CommandMessage_command(Rest, 0, 0, F1, F2, F3,
					 F4);
      18 ->
	  d_field_CommandMessage_identifier(Rest, 0, 0, F1, F2,
					    F3, F4);
      26 ->
	  d_field_CommandMessage_connection_identifiers(Rest, 0,
							0, F1, F2, F3, F4);
      34 ->
	  d_field_CommandMessage_data(Rest, 0, 0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommandMessage(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_CommandMessage(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_CommandMessage(Rest, 0, 0, F1, F2,
						     F3, F4);
	    5 -> skip_32_CommandMessage(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_CommandMessage(<<>>, 0, 0, F1, F2, F3,
				 F4) ->
    #'CommandMessage'{command = F1, identifier = F2,
		      connection_identifiers = F3, data = F4}.

d_field_CommandMessage_command(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CommandMessage_command(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4);
d_field_CommandMessage_command(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0,
				      NewFValue, F2, F3, F4).


d_field_CommandMessage_identifier(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CommandMessage_identifier(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4);
d_field_CommandMessage_identifier(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1,
				      NewFValue, F3, F4).


d_field_CommandMessage_connection_identifiers(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CommandMessage_connection_identifiers(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4);
d_field_CommandMessage_connection_identifiers(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1, F2,
				      NewFValue, F4).


d_field_CommandMessage_data(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CommandMessage_data(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4);
d_field_CommandMessage_data(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1, F2,
				      F3, NewFValue).


skip_varint_CommandMessage(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_CommandMessage(Rest, Z1, Z2, F1, F2, F3,
			       F4);
skip_varint_CommandMessage(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_CommandMessage(Rest, Z1, Z2, F1, F2,
				      F3, F4).


skip_length_delimited_CommandMessage(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_CommandMessage(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_CommandMessage(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommandMessage(Rest2, 0, 0, F1, F2,
				      F3, F4).


skip_32_CommandMessage(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4) ->
    dfp_read_field_def_CommandMessage(Rest, Z1, Z2, F1, F2,
				      F3, F4).


skip_64_CommandMessage(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4) ->
    dfp_read_field_def_CommandMessage(Rest, Z1, Z2, F1, F2,
				      F3, F4).


d_msg_ConnectionResponse(Bin) ->
    dfp_read_field_def_ConnectionResponse(Bin, 0, 0,
					  id('ERROR'), id(<<>>), id([])).

dfp_read_field_def_ConnectionResponse(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_ConnectionResponse_status(Rest, Z1, Z2, F1, F2,
				      F3);
dfp_read_field_def_ConnectionResponse(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_ConnectionResponse_identifiers(Rest, Z1, Z2, F1,
					   F2, F3);
dfp_read_field_def_ConnectionResponse(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_ConnectionResponse_transmissions(Rest, Z1, Z2,
					     F1, F2, F3);
dfp_read_field_def_ConnectionResponse(<<>>, 0, 0, F1,
				      F2, F3) ->
    #'ConnectionResponse'{status = F1, identifiers = F2,
			  transmissions = lists_reverse(F3)};
dfp_read_field_def_ConnectionResponse(Other, Z1, Z2, F1,
				      F2, F3) ->
    dg_read_field_def_ConnectionResponse(Other, Z1, Z2, F1,
					 F2, F3).

dg_read_field_def_ConnectionResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_ConnectionResponse(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
dg_read_field_def_ConnectionResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ConnectionResponse_status(Rest, 0, 0, F1, F2,
					    F3);
      18 ->
	  d_field_ConnectionResponse_identifiers(Rest, 0, 0, F1,
						 F2, F3);
      26 ->
	  d_field_ConnectionResponse_transmissions(Rest, 0, 0, F1,
						   F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ConnectionResponse(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_ConnectionResponse(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_ConnectionResponse(Rest, 0, 0, F1,
							 F2, F3);
	    5 -> skip_32_ConnectionResponse(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_ConnectionResponse(<<>>, 0, 0, F1, F2,
				     F3) ->
    #'ConnectionResponse'{status = F1, identifiers = F2,
			  transmissions = lists_reverse(F3)}.

d_field_ConnectionResponse_status(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ConnectionResponse_status(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
d_field_ConnectionResponse_status(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Status(Tmp),
    dfp_read_field_def_ConnectionResponse(Rest, 0, 0,
					  NewFValue, F2, F3).


d_field_ConnectionResponse_identifiers(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ConnectionResponse_identifiers(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
d_field_ConnectionResponse_identifiers(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ConnectionResponse(Rest2, 0, 0, F1,
					  NewFValue, F3).


d_field_ConnectionResponse_transmissions(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ConnectionResponse_transmissions(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
d_field_ConnectionResponse_transmissions(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_ConnectionResponse_transmissions(PackedBytes,
							0, 0, F3),
    dfp_read_field_def_ConnectionResponse(Rest2, 0, 0, F1,
					  F2, NewSeq).


d_packed_field_ConnectionResponse_transmissions(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_ConnectionResponse_transmissions(Rest,
						    N + 7, X bsl N + Acc,
						    AccSeq);
d_packed_field_ConnectionResponse_transmissions(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, AccSeq) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    d_packed_field_ConnectionResponse_transmissions(Rest2,
						    0, 0, [NewFValue | AccSeq]);
d_packed_field_ConnectionResponse_transmissions(<<>>, 0,
						0, AccSeq) ->
    AccSeq.


skip_varint_ConnectionResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    skip_varint_ConnectionResponse(Rest, Z1, Z2, F1, F2,
				   F3);
skip_varint_ConnectionResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_ConnectionResponse(Rest, Z1, Z2, F1,
					  F2, F3).


skip_length_delimited_ConnectionResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_ConnectionResponse(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
skip_length_delimited_ConnectionResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectionResponse(Rest2, 0, 0, F1,
					  F2, F3).


skip_32_ConnectionResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    dfp_read_field_def_ConnectionResponse(Rest, Z1, Z2, F1,
					  F2, F3).


skip_64_ConnectionResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    dfp_read_field_def_ConnectionResponse(Rest, Z1, Z2, F1,
					  F2, F3).


d_msg_ConnectionRequest(Bin) ->
    dfp_read_field_def_ConnectionRequest(Bin, 0, 0,
					 id(<<>>),
					 'tr_decode_init_default_ConnectionRequest.headers'([])).

dfp_read_field_def_ConnectionRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_ConnectionRequest_path(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ConnectionRequest(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_ConnectionRequest_headers(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ConnectionRequest(<<>>, 0, 0, F1,
				     F2) ->
    #'ConnectionRequest'{path = F1,
			 headers =
			     'tr_decode_repeated_finalize_ConnectionRequest.headers'(F2)};
dfp_read_field_def_ConnectionRequest(Other, Z1, Z2, F1,
				     F2) ->
    dg_read_field_def_ConnectionRequest(Other, Z1, Z2, F1,
					F2).

dg_read_field_def_ConnectionRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ConnectionRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2);
dg_read_field_def_ConnectionRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ConnectionRequest_path(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_ConnectionRequest_headers(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ConnectionRequest(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ConnectionRequest(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ConnectionRequest(Rest, 0, 0, F1,
							F2);
	    5 -> skip_32_ConnectionRequest(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ConnectionRequest(<<>>, 0, 0, F1,
				    F2) ->
    #'ConnectionRequest'{path = F1,
			 headers =
			     'tr_decode_repeated_finalize_ConnectionRequest.headers'(F2)}.

d_field_ConnectionRequest_path(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 57 ->
    d_field_ConnectionRequest_path(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
d_field_ConnectionRequest_path(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ConnectionRequest(Rest2, 0, 0,
					 NewFValue, F2).


d_field_ConnectionRequest_headers(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    d_field_ConnectionRequest_headers(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
d_field_ConnectionRequest_headers(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_map<string,string>'(Bs),
    dfp_read_field_def_ConnectionRequest(Rest2, 0, 0, F1,
					 'tr_decode_repeated_add_elem_ConnectionRequest.headers'(NewFValue,
												 F2)).


skip_varint_ConnectionRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    skip_varint_ConnectionRequest(Rest, Z1, Z2, F1, F2);
skip_varint_ConnectionRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    dfp_read_field_def_ConnectionRequest(Rest, Z1, Z2, F1,
					 F2).


skip_length_delimited_ConnectionRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ConnectionRequest(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
skip_length_delimited_ConnectionRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectionRequest(Rest2, 0, 0, F1,
					 F2).


skip_32_ConnectionRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_ConnectionRequest(Rest, Z1, Z2, F1,
					 F2).


skip_64_ConnectionRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_ConnectionRequest(Rest, Z1, Z2, F1,
					 F2).


d_msg_DisconnectRequest(Bin) ->
    dfp_read_field_def_DisconnectRequest(Bin, 0, 0,
					 id(<<>>), id([])).

dfp_read_field_def_DisconnectRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_DisconnectRequest_identifiers(Rest, Z1, Z2, F1,
					  F2);
dfp_read_field_def_DisconnectRequest(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    d_field_DisconnectRequest_subscriptions(Rest, Z1, Z2,
					    F1, F2);
dfp_read_field_def_DisconnectRequest(<<>>, 0, 0, F1,
				     F2) ->
    #'DisconnectRequest'{identifiers = F1,
			 subscriptions = lists_reverse(F2)};
dfp_read_field_def_DisconnectRequest(Other, Z1, Z2, F1,
				     F2) ->
    dg_read_field_def_DisconnectRequest(Other, Z1, Z2, F1,
					F2).

dg_read_field_def_DisconnectRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_DisconnectRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2);
dg_read_field_def_DisconnectRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DisconnectRequest_identifiers(Rest, 0, 0, F1,
						F2);
      18 ->
	  d_field_DisconnectRequest_subscriptions(Rest, 0, 0, F1,
						  F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_DisconnectRequest(Rest, 0, 0, F1, F2);
	    1 -> skip_64_DisconnectRequest(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_DisconnectRequest(Rest, 0, 0, F1,
							F2);
	    5 -> skip_32_DisconnectRequest(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_DisconnectRequest(<<>>, 0, 0, F1,
				    F2) ->
    #'DisconnectRequest'{identifiers = F1,
			 subscriptions = lists_reverse(F2)}.

d_field_DisconnectRequest_identifiers(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 57 ->
    d_field_DisconnectRequest_identifiers(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
d_field_DisconnectRequest_identifiers(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0,
					 NewFValue, F2).


d_field_DisconnectRequest_subscriptions(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    d_field_DisconnectRequest_subscriptions(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
d_field_DisconnectRequest_subscriptions(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_DisconnectRequest_subscriptions(PackedBytes,
						       0, 0, F2),
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0, F1,
					 NewSeq).


d_packed_field_DisconnectRequest_subscriptions(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_DisconnectRequest_subscriptions(Rest,
						   N + 7, X bsl N + Acc,
						   AccSeq);
d_packed_field_DisconnectRequest_subscriptions(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, AccSeq) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    d_packed_field_DisconnectRequest_subscriptions(Rest2, 0,
						   0, [NewFValue | AccSeq]);
d_packed_field_DisconnectRequest_subscriptions(<<>>, 0,
					       0, AccSeq) ->
    AccSeq.


skip_varint_DisconnectRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    skip_varint_DisconnectRequest(Rest, Z1, Z2, F1, F2);
skip_varint_DisconnectRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    dfp_read_field_def_DisconnectRequest(Rest, Z1, Z2, F1,
					 F2).


skip_length_delimited_DisconnectRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_DisconnectRequest(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
skip_length_delimited_DisconnectRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisconnectRequest(Rest2, 0, 0, F1,
					 F2).


skip_32_DisconnectRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_DisconnectRequest(Rest, Z1, Z2, F1,
					 F2).


skip_64_DisconnectRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    dfp_read_field_def_DisconnectRequest(Rest, Z1, Z2, F1,
					 F2).



'd_msg_map<string,string>'(Bin) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id(undefined), id(undefined)).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F1,
				       F2);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0, F1,
					F2) ->
    #'map<string,string>'{key = F1, value = F2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F1, F2) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F1, F2).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_map<string,string>'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F1, F2);
	    5 -> 'skip_32_map<string,string>'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F1,
				       F2) ->
    #'map<string,string>'{key = F1, value = F2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    NewFValue, F2).


'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F1,
					    NewFValue).


'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F1, F2);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F1, F2).


'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F1, F2);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F1,
					    F2).


'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F1, F2).


'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F1, F2).



d_enum_Status(0) -> 'ERROR';
d_enum_Status(1) -> 'SUCCESS'.



merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'DisconnectResponse'{} ->
	  merge_msg_DisconnectResponse(Prev, New);
      #'CommandResponse'{} ->
	  merge_msg_CommandResponse(Prev, New);
      #'CommandMessage'{} ->
	  merge_msg_CommandMessage(Prev, New);
      #'ConnectionResponse'{} ->
	  merge_msg_ConnectionResponse(Prev, New);
      #'ConnectionRequest'{} ->
	  merge_msg_ConnectionRequest(Prev, New);
      #'DisconnectRequest'{} ->
	  merge_msg_DisconnectRequest(Prev, New)
    end.

merge_msg_DisconnectResponse(#'DisconnectResponse'{status
						       = PFstatus},
			     #'DisconnectResponse'{status = NFstatus}) ->
    #'DisconnectResponse'{status =
			      if NFstatus =:= undefined -> PFstatus;
				 true -> NFstatus
			      end}.

merge_msg_CommandResponse(#'CommandResponse'{status =
						 PFstatus,
					     disconnect = PFdisconnect,
					     stop_streams = PFstop_streams,
					     stream_from = PFstream_from,
					     stream_id = PFstream_id,
					     transmissions = PFtransmissions},
			  #'CommandResponse'{status = NFstatus,
					     disconnect = NFdisconnect,
					     stop_streams = NFstop_streams,
					     stream_from = NFstream_from,
					     stream_id = NFstream_id,
					     transmissions =
						 NFtransmissions}) ->
    #'CommandResponse'{status =
			   if NFstatus =:= undefined -> PFstatus;
			      true -> NFstatus
			   end,
		       disconnect =
			   if NFdisconnect =:= undefined -> PFdisconnect;
			      true -> NFdisconnect
			   end,
		       stop_streams =
			   if NFstop_streams =:= undefined -> PFstop_streams;
			      true -> NFstop_streams
			   end,
		       stream_from =
			   if NFstream_from =:= undefined -> PFstream_from;
			      true -> NFstream_from
			   end,
		       stream_id =
			   if NFstream_id =:= undefined -> PFstream_id;
			      true -> NFstream_id
			   end,
		       transmissions =
			   'erlang_++'(PFtransmissions, NFtransmissions)}.

merge_msg_CommandMessage(#'CommandMessage'{command =
					       PFcommand,
					   identifier = PFidentifier,
					   connection_identifiers =
					       PFconnection_identifiers,
					   data = PFdata},
			 #'CommandMessage'{command = NFcommand,
					   identifier = NFidentifier,
					   connection_identifiers =
					       NFconnection_identifiers,
					   data = NFdata}) ->
    #'CommandMessage'{command =
			  if NFcommand =:= undefined -> PFcommand;
			     true -> NFcommand
			  end,
		      identifier =
			  if NFidentifier =:= undefined -> PFidentifier;
			     true -> NFidentifier
			  end,
		      connection_identifiers =
			  if NFconnection_identifiers =:= undefined ->
				 PFconnection_identifiers;
			     true -> NFconnection_identifiers
			  end,
		      data =
			  if NFdata =:= undefined -> PFdata;
			     true -> NFdata
			  end}.

merge_msg_ConnectionResponse(#'ConnectionResponse'{status
						       = PFstatus,
						   identifiers = PFidentifiers,
						   transmissions =
						       PFtransmissions},
			     #'ConnectionResponse'{status = NFstatus,
						   identifiers = NFidentifiers,
						   transmissions =
						       NFtransmissions}) ->
    #'ConnectionResponse'{status =
			      if NFstatus =:= undefined -> PFstatus;
				 true -> NFstatus
			      end,
			  identifiers =
			      if NFidentifiers =:= undefined -> PFidentifiers;
				 true -> NFidentifiers
			      end,
			  transmissions =
			      'erlang_++'(PFtransmissions, NFtransmissions)}.

merge_msg_ConnectionRequest(#'ConnectionRequest'{path =
						     PFpath,
						 headers = PFheaders},
			    #'ConnectionRequest'{path = NFpath,
						 headers = NFheaders}) ->
    #'ConnectionRequest'{path =
			     if NFpath =:= undefined -> PFpath;
				true -> NFpath
			     end,
			 headers =
			     'tr_merge_ConnectionRequest.headers'(PFheaders,
								  NFheaders)}.

merge_msg_DisconnectRequest(#'DisconnectRequest'{identifiers
						     = PFidentifiers,
						 subscriptions =
						     PFsubscriptions},
			    #'DisconnectRequest'{identifiers = NFidentifiers,
						 subscriptions =
						     NFsubscriptions}) ->
    #'DisconnectRequest'{identifiers =
			     if NFidentifiers =:= undefined -> PFidentifiers;
				true -> NFidentifiers
			     end,
			 subscriptions =
			     'erlang_++'(PFsubscriptions, NFsubscriptions)}.



verify_msg(Msg) ->
    case Msg of
      #'DisconnectResponse'{} ->
	  v_msg_DisconnectResponse(Msg, ['DisconnectResponse']);
      #'CommandResponse'{} ->
	  v_msg_CommandResponse(Msg, ['CommandResponse']);
      #'CommandMessage'{} ->
	  v_msg_CommandMessage(Msg, ['CommandMessage']);
      #'ConnectionResponse'{} ->
	  v_msg_ConnectionResponse(Msg, ['ConnectionResponse']);
      #'ConnectionRequest'{} ->
	  v_msg_ConnectionRequest(Msg, ['ConnectionRequest']);
      #'DisconnectRequest'{} ->
	  v_msg_DisconnectRequest(Msg, ['DisconnectRequest']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_DisconnectResponse/2}).
v_msg_DisconnectResponse(#'DisconnectResponse'{status =
						   F1},
			 Path) ->
    v_enum_Status(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_CommandResponse/2}).
v_msg_CommandResponse(#'CommandResponse'{status = F1,
					 disconnect = F2, stop_streams = F3,
					 stream_from = F4, stream_id = F5,
					 transmissions = F6},
		      Path) ->
    v_enum_Status(F1, [status | Path]),
    v_type_bool(F2, [disconnect | Path]),
    v_type_bool(F3, [stop_streams | Path]),
    v_type_bool(F4, [stream_from | Path]),
    v_type_string(F5, [stream_id | Path]),
    if is_list(F6) ->
	   _ = [v_type_string(Elem, [transmissions | Path])
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F6, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CommandMessage/2}).
v_msg_CommandMessage(#'CommandMessage'{command = F1,
				       identifier = F2,
				       connection_identifiers = F3, data = F4},
		     Path) ->
    v_type_string(F1, [command | Path]),
    v_type_string(F2, [identifier | Path]),
    v_type_string(F3, [connection_identifiers | Path]),
    v_type_string(F4, [data | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_ConnectionResponse/2}).
v_msg_ConnectionResponse(#'ConnectionResponse'{status =
						   F1,
					       identifiers = F2,
					       transmissions = F3},
			 Path) ->
    v_enum_Status(F1, [status | Path]),
    v_type_string(F2, [identifiers | Path]),
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [transmissions | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ConnectionRequest/2}).
v_msg_ConnectionRequest(#'ConnectionRequest'{path = F1,
					     headers = F2},
			Path) ->
    v_type_string(F1, [path | Path]),
    'v_map<string,string>'(F2, [headers | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_DisconnectRequest/2}).
v_msg_DisconnectRequest(#'DisconnectRequest'{identifiers
						 = F1,
					     subscriptions = F2},
			Path) ->
    v_type_string(F1, [identifiers | Path]),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [subscriptions | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_enum_Status/2}).
v_enum_Status('ERROR', _Path) -> ok;
v_enum_Status('SUCCESS', _Path) -> ok;
v_enum_Status(X, Path) ->
    mk_type_error({invalid_enum, 'Status'}, X, Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,'v_map<string,string>'/2}).
'v_map<string,string>'(KVs, Path) when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_string(Key, [key | Path]),
	   v_type_string(Value, [value | Path]);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,string>'(X, Path) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.

-compile({inline,'tr_decode_init_default_ConnectionRequest.headers'/1}).
'tr_decode_init_default_ConnectionRequest.headers'(_) ->
    mt_empty_map_r().

-compile({inline,'tr_decode_repeated_add_elem_ConnectionRequest.headers'/2}).
'tr_decode_repeated_add_elem_ConnectionRequest.headers'(Elem,
							L) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_repeated_finalize_ConnectionRequest.headers'/1}).
'tr_decode_repeated_finalize_ConnectionRequest.headers'(L) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_merge_ConnectionRequest.headers'/2}).
'tr_merge_ConnectionRequest.headers'(X1, X2) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_encode_ConnectionRequest.headers.[elem]'/1}).
'tr_encode_ConnectionRequest.headers.[elem]'(X) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) ->
    {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> dict:new().

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, D) -> dict:store(K, V, D).


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end,
			    dict:from_list(L1), dict:from_list(L2))).




get_msg_defs() ->
    [{{enum, 'Status'}, [{'ERROR', 0}, {'SUCCESS', 1}]},
     {{msg, 'DisconnectResponse'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'Status'}, occurrence = required,
	      opts = []}]},
     {{msg, 'CommandResponse'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'Status'}, occurrence = required,
	      opts = []},
       #field{name = disconnect, fnum = 2, rnum = 3,
	      type = bool, occurrence = required, opts = []},
       #field{name = stop_streams, fnum = 3, rnum = 4,
	      type = bool, occurrence = required, opts = []},
       #field{name = stream_from, fnum = 4, rnum = 5,
	      type = bool, occurrence = required, opts = []},
       #field{name = stream_id, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []},
       #field{name = transmissions, fnum = 6, rnum = 7,
	      type = string, occurrence = repeated,
	      opts = [packed]}]},
     {{msg, 'CommandMessage'},
      [#field{name = command, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = identifier, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = connection_identifiers, fnum = 3,
	      rnum = 4, type = string, occurrence = required,
	      opts = []},
       #field{name = data, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ConnectionResponse'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'Status'}, occurrence = required,
	      opts = []},
       #field{name = identifiers, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = transmissions, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated,
	      opts = [packed]}]},
     {{msg, 'ConnectionRequest'},
      [#field{name = path, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = headers, fnum = 2, rnum = 3,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'DisconnectRequest'},
      [#field{name = identifiers, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = subscriptions, fnum = 2, rnum = 3,
	      type = string, occurrence = repeated,
	      opts = [packed]}]}].


get_msg_names() ->
    ['DisconnectResponse', 'CommandResponse',
     'CommandMessage', 'ConnectionResponse',
     'ConnectionRequest', 'DisconnectRequest'].


get_enum_names() -> ['Status'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('DisconnectResponse') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'Status'}, occurrence = required,
	    opts = []}];
find_msg_def('CommandResponse') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'Status'}, occurrence = required,
	    opts = []},
     #field{name = disconnect, fnum = 2, rnum = 3,
	    type = bool, occurrence = required, opts = []},
     #field{name = stop_streams, fnum = 3, rnum = 4,
	    type = bool, occurrence = required, opts = []},
     #field{name = stream_from, fnum = 4, rnum = 5,
	    type = bool, occurrence = required, opts = []},
     #field{name = stream_id, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []},
     #field{name = transmissions, fnum = 6, rnum = 7,
	    type = string, occurrence = repeated, opts = [packed]}];
find_msg_def('CommandMessage') ->
    [#field{name = command, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = identifier, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = connection_identifiers, fnum = 3,
	    rnum = 4, type = string, occurrence = required,
	    opts = []},
     #field{name = data, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ConnectionResponse') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'Status'}, occurrence = required,
	    opts = []},
     #field{name = identifiers, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = transmissions, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = [packed]}];
find_msg_def('ConnectionRequest') ->
    [#field{name = path, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = headers, fnum = 2, rnum = 3,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('DisconnectRequest') ->
    [#field{name = identifiers, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = subscriptions, fnum = 2, rnum = 3,
	    type = string, occurrence = repeated, opts = [packed]}];
find_msg_def(_) -> error.


find_enum_def('Status') ->
    [{'ERROR', 0}, {'SUCCESS', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('Status', Value) ->
    enum_symbol_by_value_Status(Value).


enum_value_by_symbol('Status', Sym) ->
    enum_value_by_symbol_Status(Sym).


enum_symbol_by_value_Status(0) -> 'ERROR';
enum_symbol_by_value_Status(1) -> 'SUCCESS'.


enum_value_by_symbol_Status('ERROR') -> 0;
enum_value_by_symbol_Status('SUCCESS') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> anycable.



gpb_version_as_string() ->
    "3.22.5".

gpb_version_as_list() ->
    [3,22,5].
