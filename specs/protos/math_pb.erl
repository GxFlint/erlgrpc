%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.22.5
-module(math_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("math_pb.hrl").
-include("gpb.hrl").



encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'OperationReply'{} -> e_msg_OperationReply(Msg);
      #'OperationRequest'{} -> e_msg_OperationRequest(Msg)
    end.


e_msg_OperationReply(Msg) ->
    e_msg_OperationReply(Msg, <<>>).


e_msg_OperationReply(#'OperationReply'{result = F1},
		     Bin) ->
    if F1 =:= 0 -> Bin;
       true -> e_type_int32(F1, <<Bin/binary, 8>>)
    end.

e_msg_OperationRequest(Msg) ->
    e_msg_OperationRequest(Msg, <<>>).


e_msg_OperationRequest(#'OperationRequest'{a = F1,
					   b = F2},
		       Bin) ->
    B1 = if F1 =:= 0 -> Bin;
	    true -> e_type_int32(F1, <<Bin/binary, 8>>)
	 end,
    if F2 =:= 0 -> B1;
       true -> e_type_int32(F2, <<B1/binary, 16>>)
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'OperationReply' -> d_msg_OperationReply(Bin);
      'OperationRequest' -> d_msg_OperationRequest(Bin)
    end.



d_msg_OperationReply(Bin) ->
    dfp_read_field_def_OperationReply(Bin, 0, 0, id(0)).

dfp_read_field_def_OperationReply(<<8, Rest/binary>>,
				  Z1, Z2, F1) ->
    d_field_OperationReply_result(Rest, Z1, Z2, F1);
dfp_read_field_def_OperationReply(<<>>, 0, 0, F1) ->
    #'OperationReply'{result = F1};
dfp_read_field_def_OperationReply(Other, Z1, Z2, F1) ->
    dg_read_field_def_OperationReply(Other, Z1, Z2, F1).

dg_read_field_def_OperationReply(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_OperationReply(Rest, N + 7,
				     X bsl N + Acc, F1);
dg_read_field_def_OperationReply(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_OperationReply_result(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_OperationReply(Rest, 0, 0, F1);
	    1 -> skip_64_OperationReply(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_OperationReply(Rest, 0, 0, F1);
	    5 -> skip_32_OperationReply(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_OperationReply(<<>>, 0, 0, F1) ->
    #'OperationReply'{result = F1}.

d_field_OperationReply_result(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    d_field_OperationReply_result(Rest, N + 7,
				  X bsl N + Acc, F1);
d_field_OperationReply_result(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_OperationReply(Rest, 0, 0,
				      NewFValue).


skip_varint_OperationReply(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    skip_varint_OperationReply(Rest, Z1, Z2, F1);
skip_varint_OperationReply(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    dfp_read_field_def_OperationReply(Rest, Z1, Z2, F1).


skip_length_delimited_OperationReply(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_OperationReply(Rest, N + 7,
					 X bsl N + Acc, F1);
skip_length_delimited_OperationReply(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OperationReply(Rest2, 0, 0, F1).


skip_32_OperationReply(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_OperationReply(Rest, Z1, Z2, F1).


skip_64_OperationReply(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_OperationReply(Rest, Z1, Z2, F1).


d_msg_OperationRequest(Bin) ->
    dfp_read_field_def_OperationRequest(Bin, 0, 0, id(0),
					id(0)).

dfp_read_field_def_OperationRequest(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_OperationRequest_a(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_OperationRequest(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_OperationRequest_b(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_OperationRequest(<<>>, 0, 0, F1,
				    F2) ->
    #'OperationRequest'{a = F1, b = F2};
dfp_read_field_def_OperationRequest(Other, Z1, Z2, F1,
				    F2) ->
    dg_read_field_def_OperationRequest(Other, Z1, Z2, F1,
				       F2).

dg_read_field_def_OperationRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_OperationRequest(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
dg_read_field_def_OperationRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_OperationRequest_a(Rest, 0, 0, F1, F2);
      16 -> d_field_OperationRequest_b(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_OperationRequest(Rest, 0, 0, F1, F2);
	    1 -> skip_64_OperationRequest(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_OperationRequest(Rest, 0, 0, F1,
						       F2);
	    5 -> skip_32_OperationRequest(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_OperationRequest(<<>>, 0, 0, F1,
				   F2) ->
    #'OperationRequest'{a = F1, b = F2}.

d_field_OperationRequest_a(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2)
    when N < 57 ->
    d_field_OperationRequest_a(Rest, N + 7, X bsl N + Acc,
			       F1, F2);
d_field_OperationRequest_a(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_OperationRequest(Rest, 0, 0,
					NewFValue, F2).


d_field_OperationRequest_b(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2)
    when N < 57 ->
    d_field_OperationRequest_b(Rest, N + 7, X bsl N + Acc,
			       F1, F2);
d_field_OperationRequest_b(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_OperationRequest(Rest, 0, 0, F1,
					NewFValue).


skip_varint_OperationRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    skip_varint_OperationRequest(Rest, Z1, Z2, F1, F2);
skip_varint_OperationRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    dfp_read_field_def_OperationRequest(Rest, Z1, Z2, F1,
					F2).


skip_length_delimited_OperationRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_OperationRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
skip_length_delimited_OperationRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OperationRequest(Rest2, 0, 0, F1,
					F2).


skip_32_OperationRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_OperationRequest(Rest, Z1, Z2, F1,
					F2).


skip_64_OperationRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_OperationRequest(Rest, Z1, Z2, F1,
					F2).






merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'OperationReply'{} ->
	  merge_msg_OperationReply(Prev, New);
      #'OperationRequest'{} ->
	  merge_msg_OperationRequest(Prev, New)
    end.

merge_msg_OperationReply(#'OperationReply'{result =
					       PFresult},
			 #'OperationReply'{result = NFresult}) ->
    #'OperationReply'{result =
			  if NFresult =:= undefined -> PFresult;
			     true -> NFresult
			  end}.

merge_msg_OperationRequest(#'OperationRequest'{a = PFa,
					       b = PFb},
			   #'OperationRequest'{a = NFa, b = NFb}) ->
    #'OperationRequest'{a =
			    if NFa =:= undefined -> PFa;
			       true -> NFa
			    end,
			b =
			    if NFb =:= undefined -> PFb;
			       true -> NFb
			    end}.



verify_msg(Msg) ->
    case Msg of
      #'OperationReply'{} ->
	  v_msg_OperationReply(Msg, ['OperationReply']);
      #'OperationRequest'{} ->
	  v_msg_OperationRequest(Msg, ['OperationRequest']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_OperationReply/2}).
v_msg_OperationReply(#'OperationReply'{result = F1},
		     Path) ->
    v_type_int32(F1, [result | Path]), ok.

-dialyzer({nowarn_function,v_msg_OperationRequest/2}).
v_msg_OperationRequest(#'OperationRequest'{a = F1,
					   b = F2},
		       Path) ->
    v_type_int32(F1, [a | Path]),
    v_type_int32(F2, [b | Path]),
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'OperationReply'},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'OperationRequest'},
      [#field{name = a, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = b, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['OperationReply', 'OperationRequest'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('OperationReply') ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('OperationRequest') ->
    [#field{name = a, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = b, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> testmath.



gpb_version_as_string() ->
    "3.22.5".

gpb_version_as_list() ->
    [3,22,5].
